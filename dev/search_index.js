var documenterSearchIndex = {"docs":
[{"location":"","page":"Reference","title":"Reference","text":"CurrentModule = SimpleDelimitedFiles\nDocTestSetup = quote\n\tusing SimpleDelimitedFiles\nend","category":"page"},{"location":"#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"","page":"Reference","title":"Reference","text":"Modules = [SimpleDelimitedFiles]","category":"page"},{"location":"#SimpleDelimitedFiles.readdlm","page":"Reference","title":"SimpleDelimitedFiles.readdlm","text":"readdlm(source, [delim::Char = '\\t'], [T::Type = Float64])\n\nRead a delimited numerical matrix from the file named source. The elements of the matrix should be of type T. The end of line delimiter is taken as \\n.\n\nFor simple usecases, this is a more performant equivalent of readdlm from DelimitedFiles.\n\nExamples\n\njulia> f = tempname();\n\njulia> using DelimitedFiles\n\njulia> writedlm(f, ones(2, 2))\n\njulia> SimpleDelimitedFiles.readdlm(f)\n2×2 Matrix{Float64}:\n 1.0  1.0\n 1.0  1.0\n\njulia> writedlm(f, ones(Int, 2, 2))\n\njulia> SimpleDelimitedFiles.readdlm(f, Int)\n2×2 Matrix{Int64}:\n 1  1\n 1  1\n\njulia> writedlm(f, ones(Int, 2, 2), ',')\n\njulia> SimpleDelimitedFiles.readdlm(f, ',', Int)\n2×2 Matrix{Int64}:\n 1  1\n 1  1\n\n\n\n\n\n","category":"function"}]
}
